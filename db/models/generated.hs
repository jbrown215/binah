{-# LANGUAGE ExistentialQuantification, KindSignatures, TypeFamilies, GADTs #-}

module Generated where
{-- This stuff is all just needed for the types, not actually generated by models --}

class PersistEntity record where
    data EntityField record :: * -> *
    {- More actual stuff, but we don't care about it for refinements -}

{- Generated code starts here -}
data Blob = Blob { blobXVal :: Int, blobYVal :: Int }

instance PersistEntity Blob where
    data EntityField Blob typ where
        BlobXVal :: EntityField Blob Int
        BlobYVal :: EntityField Blob Int
